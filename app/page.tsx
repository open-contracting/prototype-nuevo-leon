{"data":"aW1wb3J0IHsgQ2FyZCwgQ2FyZENvbnRlbnQgfSBmcm9tICJAL2NvbXBvbmVudHMvdWkvY2FyZCIKaW1wb3J0IHsgRGF0ZVBpY2tlcldpdGhSYW5nZSB9IGZyb20gIkAvY29tcG9uZW50cy9kYXRlLXJhbmdlLXBpY2tlciIKaW1wb3J0IHsgRW50aXR5U2VsZWN0b3IgfSBmcm9tICJAL2NvbXBvbmVudHMvZW50aXR5LXNlbGVjdG9yIgppbXBvcnQgeyBQcm9jZXNzZXNDaGFydCB9IGZyb20gIkAvY29tcG9uZW50cy9wcm9jZXNzZXMtY2hhcnQiCmltcG9ydCB7IFByb2Nlc3Nlc1BpZUNoYXJ0IH0gZnJvbSAiQC9jb21wb25lbnRzL3Byb2Nlc3Nlcy1waWUtY2hhcnQiCmltcG9ydCB7IFZhbHVlUGllQ2hhcnQgfSBmcm9tICJAL2NvbXBvbmVudHMvdmFsdWUtcGllLWNoYXJ0IgppbXBvcnQgeyBFbnRpdHlUYWJsZSB9IGZyb20gIkAvY29tcG9uZW50cy9lbnRpdHktdGFibGUiCmltcG9ydCB7IERhc2hib2FyZE5hdiB9IGZyb20gIkAvY29tcG9uZW50cy9kYXNoYm9hcmQtbmF2IgoKZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRGFzaGJvYXJkKCkgewogIHJldHVybiAoCiAgICA8ZGl2IGNsYXNzTmFtZT0iY29udGFpbmVyIG14LWF1dG8gcHktOCBweC00Ij4KICAgICAgey8qIE5hdmlnYXRpb24gQmFyICovfQogICAgICA8RGFzaGJvYXJkTmF2IC8+CgogICAgICA8ZGl2IGNsYXNzTmFtZT0ibWItNiI+CiAgICAgICAgPGgxIGNsYXNzTmFtZT0idGV4dC0zeGwgZm9udC1ib2xkIHRleHQtZ3JheS04MDAiPkVzdGFkw61zdGljYXMgZ2VuZXJhbGVzIGRlbCBtZXJjYWRvIGRlIGNvbXByYXM8L2gxPgogICAgICAgIDxwIGNsYXNzTmFtZT0idGV4dC1zbSB0ZXh0LWdyYXktNTAwIj4KICAgICAgICAgIEVzdGUgdGFibGVybyBtdWVzdHJhIHVuIHBhbm9yYW1hIGdlbmVyYWwgZGUgbGFzIGNvbnRyYXRhY2lvbmVzIHDDumJsaWNhcyBjb24gaW5kaWNhZG9yZXMgYWdyZWdhZG9zLgogICAgICAgIDwvcD4KICAgICAgPC9kaXY+CgogICAgICB7LyogRmlsdGVycyAqL30KICAgICAgPGRpdiBjbGFzc05hbWU9ImdyaWQgZ3JpZC1jb2xzLTEgbWQ6Z3JpZC1jb2xzLTIgZ2FwLTQgbWItOCBbJl9zdmddOnRleHQtWyNDMkE5ODJdIj4KICAgICAgICA8ZGl2PgogICAgICAgICAgPHAgY2xhc3NOYW1lPSJ0ZXh0LXNtIGZvbnQtbWVkaXVtIG1iLTIiPkZlY2hhPC9wPgogICAgICAgICAgPERhdGVQaWNrZXJXaXRoUmFuZ2UgLz4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2PgogICAgICAgICAgPHAgY2xhc3NOYW1lPSJ0ZXh0LXNtIGZvbnQtbWVkaXVtIG1iLTIiPkVudGlkYWQgY29tcHJhZG9yYTwvcD4KICAgICAgICAgIDxFbnRpdHlTZWxlY3RvciAvPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KCiAgICAgIHsvKiBLUEkgQ2FyZHMgKi99CiAgICAgIDxkaXYgY2xhc3NOYW1lPSJncmlkIGdyaWQtY29scy0xIG1kOmdyaWQtY29scy0yIGxnOmdyaWQtY29scy00IGdhcC00IG1iLTgiPgogICAgICAgIDxDYXJkPgogICAgICAgICAgPENhcmRDb250ZW50IGNsYXNzTmFtZT0icHQtNiI+CiAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9InRleHQtNHhsIGZvbnQtYm9sZCB0ZXh0LWNlbnRlciI+MDAwMDwvaDI+CiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0idGV4dC14cyB0ZXh0LWdyYXktNTAwIHRleHQtY2VudGVyIG10LTEiPk7Dum1lcm8gdG90YWwgZGUgcHJvY2Vzb3M8L3A+CiAgICAgICAgICA8L0NhcmRDb250ZW50PgogICAgICAgIDwvQ2FyZD4KICAgICAgICA8Q2FyZD4KICAgICAgICAgIDxDYXJkQ29udGVudCBjbGFzc05hbWU9InB0LTYiPgogICAgICAgICAgICA8aDIgY2xhc3NOYW1lPSJ0ZXh0LTR4bCBmb250LWJvbGQgdGV4dC1jZW50ZXIiPjAwMDA8L2gyPgogICAgICAgICAgICA8cCBjbGFzc05hbWU9InRleHQteHMgdGV4dC1ncmF5LTUwMCB0ZXh0LWNlbnRlciBtdC0xIj5WYWxvciB0b3RhbCBwcm9jZXNvcyBhZGp1ZGljYWRvczwvcD4KICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+CiAgICAgICAgPC9DYXJkPgogICAgICAgIDxDYXJkPgogICAgICAgICAgPENhcmRDb250ZW50IGNsYXNzTmFtZT0icHQtNiI+CiAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9InRleHQtNHhsIGZvbnQtYm9sZCB0ZXh0LWNlbnRlciI+MDAwMDwvaDI+CiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0idGV4dC14cyB0ZXh0LWdyYXktNTAwIHRleHQtY2VudGVyIG10LTEiPlRvdGFsIHByb3ZlZWRvcmVzIGFkanVkaWNhZG9zPC9wPgogICAgICAgICAgPC9DYXJkQ29udGVudD4KICAgICAgICA8L0NhcmQ+CiAgICAgICAgPENhcmQ+CiAgICAgICAgICA8Q2FyZENvbnRlbnQgY2xhc3NOYW1lPSJwdC02Ij4KICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT0idGV4dC00eGwgZm9udC1ib2xkIHRleHQtY2VudGVyIj4wMDAwPC9oMj4KICAgICAgICAgICAgPHAgY2xhc3NOYW1lPSJ0ZXh0LXhzIHRleHQtZ3JheS01MDAgdGV4dC1jZW50ZXIgbXQtMSI+VG90YWwgZW50aWRhZGVzIGNvbnRyYXRhbnRlczwvcD4KICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+CiAgICAgICAgPC9DYXJkPgogICAgICA8L2Rpdj4KCiAgICAgIHsvKiBDaGFydHMgLSBGaXJzdCBSb3cgKi99CiAgICAgIDxkaXYgY2xhc3NOYW1lPSJncmlkIGdyaWQtY29scy0xIG1kOmdyaWQtY29scy0yIGdhcC04IG1iLTgiPgogICAgICAgIDxDYXJkPgogICAgICAgICAgPENhcmRDb250ZW50IGNsYXNzTmFtZT0icC02Ij4KICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT0idGV4dC1iYXNlIGZvbnQtbWVkaXVtIG1iLTEiPk7Dum1lcm8gdG90YWwgZGUgcHJvY2Vzb3MgZGUgY29udHJhdGFjaW9uZXM8L2g0PgogICAgICAgICAgICA8cCBjbGFzc05hbWU9InRleHQteHMgdGV4dC1ncmF5LTUwMCBtYi00Ij5TdWJ0w610dWxvPC9wPgogICAgICAgICAgICA8UHJvY2Vzc2VzQ2hhcnQgLz4KICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+CiAgICAgICAgPC9DYXJkPgogICAgICAgIDxDYXJkPgogICAgICAgICAgPENhcmRDb250ZW50IGNsYXNzTmFtZT0icC02Ij4KICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT0idGV4dC1iYXNlIGZvbnQtbWVkaXVtIG1iLTEiPlByb3BvcmNpw7NuIGRlIHByb2Nlc29zIHBvciBtw6l0b2RvIGRlIGFkcXVpc2ljacOzbjwvaDQ+CiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0idGV4dC14cyB0ZXh0LWdyYXktNTAwIG1iLTQiPlN1YnTDrXR1bG88L3A+CiAgICAgICAgICAgIDxQcm9jZXNzZXNQaWVDaGFydCAvPgogICAgICAgICAgPC9DYXJkQ29udGVudD4KICAgICAgICA8L0NhcmQ+CiAgICAgIDwvZGl2PgoKICAgICAgey8qIENoYXJ0cyAtIFNlY29uZCBSb3cgKi99CiAgICAgIDxkaXYgY2xhc3NOYW1lPSJncmlkIGdyaWQtY29scy0xIG1kOmdyaWQtY29scy0yIGdhcC04IG1iLTgiPgogICAgICAgIDxDYXJkIGNsYXNzTmFtZT0icm91bmRlZC14bCI+CiAgICAgICAgICA8Q2FyZENvbnRlbnQgY2xhc3NOYW1lPSJwLTYiPgogICAgICAgICAgICA8aDQgY2xhc3NOYW1lPSJ0ZXh0LWJhc2UgZm9udC1tZWRpdW0gbWItMSI+UHJvcG9yY2nDs24gZGVsIHZhbG9yIGFkanVkaWNhZG8gcG9yIG3DqXRvZG8gZGUgYWRxdWlzaWNpw7NuPC9oND4KICAgICAgICAgICAgPHAgY2xhc3NOYW1lPSJ0ZXh0LWdyYXktNTAwIG1iLTQgdGV4dC14cyI+U3VidMOtdHVsbzwvcD4KICAgICAgICAgICAgPFZhbHVlUGllQ2hhcnQgLz4KICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+CiAgICAgICAgPC9DYXJkPgogICAgICAgIDxDYXJkIGNsYXNzTmFtZT0icm91bmRlZC14bCI+CiAgICAgICAgICA8Q2FyZENvbnRlbnQgY2xhc3NOYW1lPSJwLTYiPgogICAgICAgICAgICA8aDQgY2xhc3NOYW1lPSJ0ZXh0LWJhc2UgZm9udC1tZWRpdW0gbWItMSI+CiAgICAgICAgICAgICAgUHJvcG9yY2nDs24gZGUgcHJvY2Vzb3MgcG9yIGNhdGVnb3LDrWEgZGUgY29tcHJhIChiaWVuZXMgbyBzZXJ2aWNpb3MpCiAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0idGV4dC1ncmF5LTUwMCBtYi00IHRleHQteHMiPlN1YnTDrXR1bG88L3A+CiAgICAgICAgICAgIDxWYWx1ZVBpZUNoYXJ0IC8+CiAgICAgICAgICA8L0NhcmRDb250ZW50PgogICAgICAgIDwvQ2FyZD4KICAgICAgPC9kaXY+CgogICAgICB7LyogRW50aXR5IFRhYmxlICovfQogICAgICA8ZGl2IGNsYXNzTmFtZT0ibWItOCI+CiAgICAgICAgPGRpdiBjbGFzc05hbWU9Im1iLTQiPgogICAgICAgICAgPGgyIGNsYXNzTmFtZT0idGV4dC0yeGwgZm9udC1ib2xkIHRleHQtZ3JheS04MDAiPlJlc3VtZW4gcG9yIGVudGlkYWQgY29udHJhdGFudGU8L2gyPgogICAgICAgICAgPHAgY2xhc3NOYW1lPSJ0ZXh0LXNtIHRleHQtZ3JheS01MDAiPgogICAgICAgICAgICBFc3RlIHRhYmxlcm8gbXVlc3RyYSB1biBwYW5vcmFtYSBnZW5lcmFsIGRlIGxhcyBjb250cmF0YWNpb25lcyBww7pibGljYXMgY29uIGluZGljYWRvcmVzIGFncmVnYWRvcy4KICAgICAgICAgIDwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgICA8RW50aXR5VGFibGUgLz4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICApCn0K"}