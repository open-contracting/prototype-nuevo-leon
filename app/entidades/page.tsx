{"data":"import { Card, CardContent } from "@/components/ui/card"
import { SupplierSelector } from "@/components/supplier-selector"
import { AcquisitionMethodSupplierChart } from "@/components/acquisition-method-supplier-chart"
import { ArticleCategoryChart } from "@/components/article-category-chart"
import { SavingsOverrunsPieChart } from "@/components/savings-overruns-pie-chart"
import { EntityRelationshipTable } from "@/components/entity-relationship-table"
import { SharedAddressTable } from "@/components/shared-address-table"
import { SupplierProcessesTable } from "@/components/supplier-processes-table"
import { DashboardNav } from "@/components/dashboard-nav"

export default function SupplierProfilePage() {
  return (
    <div className="container mx-auto py-8 px-4">
      {/* Navigation Bar */}
      <DashboardNav />

      <div className="mb-6">
        <h1 className="text-3xl font-bold text-gray-800">Perfil del proveedor</h1>
        <p className="text-sm text-gray-500">
          Este tablero permite analizar indicadores de desempeño de los proveedores.
        </p>
      </div>

      {/* KPI Cards with Supplier Selector */}
      <div className="flex flex-col md:flex-row gap-6 mb-8">
        {/* Supplier Selector */}
        <div className="md:w-1/4">
          <div className="mb-2">
            <p className="text-sm font-medium">Nombre e identificación del proveedor</p>
          </div>
          <SupplierSelector />
        </div>

        {/* KPI Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 flex-1">
          <Card>
            <CardContent className="pt-6">
              <h2 className="text-4xl font-bold text-center">000</h2>
              <p className="text-xs text-gray-500 text-center mt-1">Cantidad procesos adjudicados al proveedor</p>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="pt-6">
              <h2 className="text-4xl font-bold text-center">000</h2>
              <p className="text-xs text-gray-500 text-center mt-1">Cantidad de ofertas presentadas</p>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="pt-6">
              <h2 className="text-4xl font-bold text-center">00</h2>
              <p className="text-xs text-gray-500 text-center mt-1">
                Entidades compradoras en las que participa el proveedor
              </p>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-baseline justify-center gap-1">
                <span className="text-sm font-medium text-[#AF8C55]">$</span>
                <h2 className="text-4xl font-bold">0000</h2>
              </div>
              <p className="text-xs text-gray-500 text-center mt-1">Valor total adjudicado al proveedor</p>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Charts - First Row */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
        <Card>
          <CardContent className="p-6">
            <h4 className="text-base font-medium mb-1">
              Proporción de procesos y valor adjudicado por método de adquisición
            </h4>
            <p className="text-xs text-gray-500 mb-4">Valor en miles de pesos mexicanos (mxn)</p>
            <AcquisitionMethodSupplierChart />
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <h4 className="text-base font-medium mb-1">Cantidad de procesos adjudicados por categoría de artículo</h4>
            <p className="text-xs text-gray-500 mb-4">Subtítulo</p>
            <ArticleCategoryChart />
          </CardContent>
        </Card>
      </div>

      {/* Charts - Second Row */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
        <Card>
          <CardContent className="p-6">
            <h4 className="text-base font-medium mb-1">Porcentaje de contratos con ahorros o sobrecostos</h4>
            <div className="flex flex-wrap gap-4 mb-4">
              {/* Legend items */}
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 rounded bg-[#4B858E]"></div>
                <span className="text-[#999999] text-[12px]">Contratos con ahorros</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 rounded bg-[#8093DC]"></div>
                <span className="text-[#999999] text-[12px]">Contratos con sobrecostos</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 rounded bg-[#F7A000]"></div>
                <span className="text-[#999999] text-[12px]">Contratos sin variación en el monto</span>
              </div>
            </div>
            <SavingsOverrunsPieChart />
          </CardContent>
        </Card>
        <div></div> {/* Empty div to maintain grid layout */}
      </div>

      {/* Entity Relationship Table */}
      <div className="mb-8">
        <div className="mb-4">
          <h2 className="text-2xl font-bold text-gray-800">Relación con entidad compradora</h2>
          <div className="flex flex-wrap gap-4 mt-2">
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 rounded bg-[#4CAF50]"></div>
              <span className="text-[#999999] text-[12px]">{"< 10%"}</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 rounded bg-[#FFA400]"></div>
              <span className="text-[#999999] text-[12px]">{">= 10% & < 30%"}</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 rounded bg-[#FF4438]"></div>
              <span className="text-[#999999] text-[12px]">{">30%"}</span>
            </div>
          </div>
        </div>
        <EntityRelationshipTable />
      </div>

      {/* Shared Address Table */}
      <div className="mb-8">
        <div className="mb-4">
          <h2 className="text-2xl font-bold text-gray-800">
            Procesos donde oferente comparte dirección con otro oferente
          </h2>
        </div>
        <SharedAddressTable />
      </div>

      {/* Supplier Processes Table */}
      <div className="mb-8">
        <div className="mb-4">
          <h2 className="text-2xl font-bold text-gray-800">
            Listado de procesos en los que participa el oferente o proveedor
          </h2>
        </div>
        <SupplierProcessesTable />
      </div>
    </div>
  )
}
"}